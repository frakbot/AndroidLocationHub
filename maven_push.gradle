apply plugin: 'maven'
apply plugin: 'signing'

archivesBaseName = GROUP_ID
version = VERSION_NAME
group = GROUP_ID

def sonatypeRepositoryUrl

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

if (isReleaseBuild()) {
    println 'RELEASE BUILD'
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println 'DEBUG BUILD'
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

afterEvaluate { project ->

    configurations {
        archives {
            extendsFrom configurations.default
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath)

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }

                pom.project {
                    name POM_NAME
                    description POM_DESCRIPTION
                    artifactId = POM_ARTIFACT_ID
                    groupId GROUP_ID
                    version VERSION_NAME

                    packaging POM_PACKAGING
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        for(int i = 1; i <= Integer.parseInt(POM_DEVELOPERS); i++) {
                            developer {
                                id getProperty('POM_DEVELOPER_'+ i + '_ID')
                                name getProperty('POM_DEVELOPER_'+ i + '_NAME')
                                email getProperty('POM_DEVELOPER_'+ i + '_EMAIL')
                            }
                        }
                    }
                }
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.allJava
    }

    task androidJavadocsJar(type: Jar) {
        classifier = 'javadoc'
        //basename = artifact_id
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        //basename = artifact_id
        from android.sourceSets.main.allSource
    }

    artifacts {
        //archives packageReleaseJar
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}